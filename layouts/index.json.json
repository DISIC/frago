{{- $context := . -}}
{{- $pagetype := slice "accessibility" "quality" "performance" -}}
{{- $.Scratch.Set "folder" "" -}}
{{- $.Scratch.Set "slugs" slice -}}
{{/* Create a map with all paths with audit if they are existing */}}
{{- range $idx, $value := $pagetype -}}
  {{- range readDir "content/audits/" -}}{{- $slug := .Name -}}
    {{- $.Scratch.Add "slugs" $slug -}}
    {{- $.Scratch.Set "folder" $value -}}
    {{- if eq $value "performance" -}}{{- $.Scratch.Set "folder" "lighthouse" -}}{{- end -}}
    {{- $.Scratch.Set (printf "rootpath%s" ($.Scratch.Get "folder")) (partialCached "render/rootpath" (dict "context" . "project" $slug "type" "accessibility") $slug "accessibility") -}}
    {{- if not (in $slug ".md") -}}
    {{ if fileExists (printf "%s/%s/" ($.Scratch.Get (printf "rootpath%s" ($.Scratch.Get "folder"))) $slug) }}
    {{- range readDir (printf "%s/%s" ($.Scratch.Get (printf "rootpath%s" ($.Scratch.Get "folder"))) $slug) -}}
        {{- $slug := cond (eq $slug "lighthouse") "performance" $slug -}}
        {{- $name := .Name -}}{{- $.Scratch.SetInMap (printf "slug-%s" (urlize $.Site.Title)) $slug (printf "audits/%s/" $slug) -}}
    {{- end -}}
    {{- $.Scratch.SetInMap "jsonslug" (urlize $.Site.Title) ($.Scratch.Get (printf "slug-%s" (urlize $.Site.Title))) -}}
    {{- end -}}
    {{- end -}}
    {{- if fileExists (printf "%s/%s/%s" ($.Scratch.Get (printf "rootpath%s" ($.Scratch.Get "folder"))) $slug ($.Scratch.Get "folder")) }}
    {{- range readDir (printf "%s/%s/%s" ($.Scratch.Get (printf "rootpath%s" ($.Scratch.Get "folder"))) $slug ($.Scratch.Get "folder")) -}}
        {{- $name := .Name -}}{{- $.Scratch.SetInMap (printf "slug-%s" $slug) $value (printf "audits/%s/%s/" $slug $value) -}}
    {{- end -}}
    {{- $.Scratch.SetInMap "jsonslug" $slug ($.Scratch.Get (printf "slug-%s" $slug)) -}}
    {{- end -}}
    {{- end -}}
{{- end -}}
{{- $.Scratch.Set "title" "" -}}
{{- $.Scratch.Set "pages" slice -}}
{{/* Loop on all paths */}}
{{- range $slug, $value := ($.Scratch.Get "jsonslug") -}}
    {{- if eq (len (split (index ($.Scratch.Get "jsonslug") $slug).accessibility "/")) 3 -}}
    {{- with $context.GetPage "_index.md" -}}{{- $.Scratch.Set "title" .Title -}}{{- end -}}
    {{- end -}}
    {{- $path      := cond (eq (len (split (index ($.Scratch.Get "jsonslug") $slug).accessibility "/")) 3) "_index.md" (printf "audits/%s" $slug) -}}
    {{- $pathstart := cond (eq (len (split (index ($.Scratch.Get "jsonslug") $slug).accessibility "/")) 3) 7 0 -}}
    {{- $project   := cond (eq (len (split (index ($.Scratch.Get "jsonslug") $slug).accessibility "/")) 3) "" $slug -}}
    {{- $slug      := cond (eq (len (split (index ($.Scratch.Get "jsonslug") $slug).accessibility "/")) 3) (urlize $.Site.Title) $slug -}}
    {{- if $context.GetPage $path -}}
    {{- with $context.GetPage (printf "audits/%s" $slug) -}}{{- $.Scratch.Set "title" .Title -}}{{- end -}}
    {{- $.Scratch.Add "pages" (dict "sitename" $.Site.Title "siteslug" (urlize $.Site.Title) "slug" $slug) -}}
    {{- $.Scratch.Delete "audits" }}
    {{- range $type, $path := $value -}}
    {{- $.Scratch.Delete $type }}
    {{- $.Scratch.Set "guideline" "" }}
      {{- if eq $type "accessibility" -}}
        {{- $accessibility := (index (partialCached "render/lastfile.html" (dict "context" $context "project" $project "type" "accessibility") $project "accessibility") "auditfile-path") -}}
        {{- if (partialCached "render/accessibility" (dict "context" $context "auditfile" $accessibility) $accessibility) -}}
          {{- range $idx, $value := ((index (partialCached "render/lastfile.html" (dict "context" $context "project" $project "type" "accessibility") $project "accessibility") "auditfile-all-path")) -}}
              {{- $date := index (partialCached "render/accessibility" (dict "context" $context "auditfile" . ) . ) "date" -}}
              {{- with index (partialCached "render/lastfile.html" (dict "context" $context "project" $project "type" "accessibility") $project "accessibility") "auditfile-context" -}}
                  {{- $.Scratch.Set "guideline" (index (readFile . | transform.Unmarshal) $date) -}}
              {{- end -}}
              {{- $context.Scratch.Set "context" (partialCached "render/context.html" (dict "context" $context "project" $project) $project) -}}
              {{ warnf "%s" ($context.Scratch.Get "context") }}
              {{- $.Scratch.SetInMap $type $idx (dict "url" (replace (replace . "/content/" "") "/static/" "") "context" ($context.Scratch.Get "context") "score" ((partialCached "render/accessibility" (dict "context" $context "auditfile" . ) . ).scores)) -}}
          {{- end -}}
          {{- $.Scratch.SetInMap "audits" $type (dict "urls" (dict "api" (printf "%s.json" (substr $path $pathstart -1)) "declaration" (printf "%sdeclaration.txt" (substr $path $pathstart -14)))  "rgaa" ($.Scratch.Get $type)) -}}
        {{- end -}}
      {{- end -}}
      {{- if eq $type "quality" -}}
        {{ $quality := (index (partialCached "render/lastfile.html" (dict "context" $context "project" $project "type" "quality") $project "quality") "auditfile-path") }}
        {{- if (partialCached "render/quality" (dict "context" $context "auditfile" $quality) $quality) -}}
          {{ range $idx, $value := (index (partialCached "render/lastfile.html" (dict "context" $context "project" $project "type" "quality") $project "quality") "auditfile-all-path") }}
              {{- $.Scratch.SetInMap $type $idx (dict "url" (replace (replace . "/content/" "") "/static/" "") "indexes" (partialCached "render/quality" (dict "context" $context "project" $project "auditfile" .) .)) -}}
          {{- end -}}
          {{- $.Scratch.SetInMap "audits" $type (dict "urls" (dict "api" (printf "%s.json" (substr $path $pathstart -1))) "scores" ($.Scratch.Get $type)) -}}
        {{- end -}}
      {{- end -}}
      {{- if eq $type "performance" -}}
        {{ $performance := (index (partialCached "render/lastfile.html" (dict "context" $context "project" $project "type" "lighthouse") $project "lighthouse") "auditfile-path") }}
        {{- if (partialCached "render/performance" (dict "context" $context "auditfile" $performance) $performance) -}}
          {{ range $idx, $value := (index (partialCached "render/lastfile.html" (dict "context" $context "project" $project "type" "lighthouse") $project "lighthouse") "auditfile-all-path") }}
              {{- $.Scratch.SetInMap $type $idx (dict "url" (replace (replace . "/content/" "") "/static/" "") "indexes" (partialCached "render/performance" (dict "context" $context "auditfile" .) . )) -}}
          {{- end -}}
          {{- $.Scratch.SetInMap "audits" $type (dict "urls" (dict "api" (printf "%s.json" (substr $path $pathstart -1))) "scores" ($.Scratch.Get $type)) -}}
        {{- end -}}
      {{- end -}}
      {{- end -}}
      {{- $.Scratch.SetInMap "slug" $slug (dict "title" ($.Scratch.Get "title") "slug" $slug "audits" ($.Scratch.Get "audits")) -}}
      {{- end -}}
      {{- end -}}
{{- (dict
  "name" .Site.Title
  "description" .Site.Params.organisation
  "websites" ($.Scratch.Get "slug")
  "pages" ($.Scratch.Get "pages")
) | jsonify -}}
